  if (result[1] !== discordRank) {

    if (result[1] === roleExperienced){
      message.member.addRole(roleExperienced);
      message.reply("congratulations! You've gained the new title: Experienced")
    }
    if (result[1] === roleAdept){
      message.member.addRole(roleAdept);
      message.reply("congratulations! You've gained the new title: Adept")
    }
    if (result[1] === roleIntermediate){
      message.member.addRole(roleIntermediate);
      message.reply("congratulations! You've gained the new title: Intermediate")
    }
    if (result[1] === roleAdvanced){
      message.member.addRole(roleAdvanced);
      message.reply("congratulations! You've gained the new title: Advanced")
    }
    if (result[1] === roleExpert){
      message.member.addRole(roleExpert);
      message.reply("congratulations! You've gained the new title: Expert")
    }
    if (result[1] === roleMaster){
      message.member.addRole(roleMaster);
      message.reply("congratulations! You've gained the new title: Master")
    }

        if (args[0] === 'health'){message.reply("your current health rank is: " + health[userID].level)}
        if (args[0] === 'strength'){message.reply("your current strength rank is: " + strength[userID].level)}
        if (args[0] === 'martial arts' || args[0] === 'ma'){message.reply("your current martial arts rank is: " + martialArts[userID].level)}
        if (args[0] === 'finance'){message.reply("your current finance rank is: " + finance[userID].level)}
        if (args[0] === 'material'){message.reply("your current material rank is: " + material[userID].level)}
        if (args[0] === 'math'){message.reply("your current math rank is: " + math[userID].level)}
        if (args[0] === 'science'){message.reply("your current science rank is: " + science[userID].level)}
        if (args[0] === 'social'){message.reply("your current social rank is: " + social[userID].level)}
        if (args[0] === 'stealth'){message.reply("your current stealth rank is: " + stealth[userID].level)}

    module.exports.addExperience = addExperience;
    async function addExperience(userID, skill, exp){
    const getSkill = 
        `SELECT xp, rank 
        FROM user 
        WHERE id = ? AND name = ? `
        let getData = db.query(getSkill, userID, skill, (err, experience, rank, field) => {
        const newExp = experience + exp;
        const currRank = rank;
        let updateData = db.query(
        `UPDATE skills
        SET rank = `+ rank + `, experience = ` + newExp + `  
        WHERE user_id = ` + userID + ` AND name = ` + skill)
     
        functionResult = 'Succes';
        return (functionResult)
        });
}

//connect to database
const db = mysql.createConnection({
  host: 'localhost',
  port: '3306',
  user: 'empernet',
  password: '',
  multipleStatements: true,
  database: 'empernet',
  charset: 'utf8mb4'
});

  //query constants
  //gets user data
  const getUser = `SELECT * FROM user WHERE id = ?`
  //gets all items from shop
  const getShop = 'SELECT * FROM shop'
  //


  //using above query statements
  var query = db.query(getUser, userID, (err, user, field) => {
    if (err) throw err;
    var query = db.query(getShop, (err, resultShop, field) => {
      if (err) throw err;

      
  Query.createUser(guildMember.id, 50, 1, 500, 0);

      let cXP = user[0].xp;
      let cLVL = user[0].level;
      let cCR = user[0].credits;
      let cSGL = user[0].sigils;
      let pAXE = user[0].pickaxe
      let lvlUP = (5000 * Math.pow(cLVL, 1.4));
      let nLVL = cLVL + 1;
      let minXP = 400 * Math.pow(cLVL, 1.1);
      let maxXP = 500 * Math.pow(cLVL, 1.1);


              if (args[0] === 'destroy') { // destroy entries
          message.reply('succesfully destroyed targets table entries')
          Query.destroyUser(message.mentions.users.first().id);
        }
        if (args[0] === 'create') { //create entries
          message.reply('succesfully created entries for the user')
          Query.createUser(message.mentions.users.first().id, args[2], args[3], args[4], args[5]);
        }

        
const db = mysql.createConnection({
  host: 'localhost',
  port: '3306',
  user: 'empernet',
  password: '',
  multipleStatements: true,
  database: 'empernet',
  charset: 'utf8mb4'
});

const getUserCR = `SELECT * FROM credits WHERE id = ?`
const getUserXP = `SELECT * FROM xp WHERE id = ?`


//xp and credits data functions
//Creates table for user
async function createUser(userID, xp, level, credits, sigils) {
  let data = await db.query(`INSERT INTO user (id, xp, level, credits, sigils) VALUES ('${userID}', '${xp}', '${level}','${credits}', '${sigils}')`);
  return data
}
module.exports.createUser = createUser;
//Updates current user xp and credits data
async function updateUser(userID, xp, level, credits, sigils) {
  let data = await db.query(`UPDATE user SET xp = ${xp}, level = ${level}, credits = ${credits}, sigils = ${sigils}  WHERE id = '${userID}'`);
  return data
}
module.exports.updateUser = updateUser;
//Deletes user from xp and credits table
async function destroyUser(userID, callback) {
  let data = await db.query(`DELETE FROM user WHERE id = '${userID}'`);
  return data
}
module.exports.destroyUser = destroyUser;
//update single user values
async function updateitem(userID, item, value) {
  let data = await db.query(`UPDATE user SET ${item} = ${value} WHERE id = '${userID}'`);
  return data
}
module.exports.updateitem = updateitem;


//shop data functions
//creates a new shop item
async function createShopItem(item, price, quantity) {
  let data = await db.query(`INSERT INTO shop (price, item, quantity) VALUES ('${price}', '${item}', '${quantity}')`);
  return data
}
module.exports.createShopItem = createShopItem;
//updates current shop item(s)
async function updateShopItemQ(quantity, item) {
  let data = await db.query(`UPDATE shop SET quantity = ${quantity} WHERE item = '${item}'`);
  return data
}
module.exports.updateShopItemQ = updateShopItemQ;
//removes item from the shop
async function removeShopItem(item, callback) {
  let data = await db.query(`DELETE FROM shop WHERE item = '${item}'`);
  return data
}
module.exports.removeShopItem = removeShopItem;


const Discord = require('discord.js');
inventory = require("./inventory.json");
bank = require("./bank.json");
const fs = require('fs')
const mysql = require('mysql');
bot = require("../bot.js")

const db = mysql.createConnection({
    host: 'localhost',
    port: '3306',
    user: 'root',
    password: '',
    multipleStatements: true,
    database: 'empernet',
    charset: 'utf8mb4'
  });

userID = 'none';

  const getUser = `SELECT * FROM users WHERE id = ?`

  var query = db.query(getUser, userID, (err, user, field) => {
    if (err) throw err;


    
  module.exports = User





var handler = function(userID, command, credits, sigils){

//using above query statements

    

const cRank = user[0].rank;
const cCR = user[0].credits;
const cSGL = user[0].sigils;

if (command === 'addCredits'){
    cCR + credits;
}
if (command === 'addSigils'){
    cSGL + sigils;
}
if (command === 'getRank'){
    var embed = new Discord.RichEmbed()
    .setTitle("Rank") 
    .addField('User Rank', cRank)
}


  var result = 'succes';
  return (result);
return 
}
exports.handler = handler;
});
